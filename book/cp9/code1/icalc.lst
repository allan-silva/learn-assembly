     1                                  ;icalc.asm
     2                                  extern printf
     3                                  section .data
     4 00000000 8000000000000000            number1     dq      128
     5 00000008 1300000000000000            number2     dq      19
     6 00000010 F4FFFFFFFFFFFFFF            neg_num     dq      -12
     7 00000018 546865206E756D6265-         fmt         db      "The numbers are %1d and %1d", 10, 0
     7 00000021 727320617265202531-
     7 0000002A 6420616E6420253164-
     7 00000033 0A00               
     8 00000035 2573202531640A00            fmtint      db      "%s %1d", 10, 0
     9 0000003D 5468652073756D2069-         sumi        db      "The sum is", 0
     9 00000046 7300               
    10 00000048 546865206469666665-         difi        db      "The difference is", 0
    10 00000051 72656E636520697300 
    11 0000005A 4E756D626572203120-         inci        db      "Number 1 Incremented:", 0
    11 00000063 496E6372656D656E74-
    11 0000006C 65643A00           
    12 00000070 4E756D626572203120-         deci        db      "Number 1 Decrementes:", 0
    12 00000079 44656372656D656E74-
    12 00000082 65733A00           
    13 00000086 4E756D626572203120-         sali        db      "Number 1 Shift left 2 (x4):", 0
    13 0000008F 5368696674206C6566-
    13 00000098 74203220287834293A-
    13 000000A1 00                 
    14 000000A2 4E756D626572203120-         sari        db      "Number 1 Shift right 2 (/4):", 0
    14 000000AB 536869667420726967-
    14 000000B4 6874203220282F3429-
    14 000000BD 3A00               
    15 000000BF 4E756D626572203120-         sariex      db      "Number 1 Shift right 2 (/4) with sign extension:", 0
    15 000000C8 536869667420726967-
    15 000000D1 6874203220282F3429-
    15 000000DA 207769746820736967-
    15 000000E3 6E20657874656E7369-
    15 000000EC 6F6E3A00           
    16 000000F0 5468652070726F6475-         multi       db      "The product is", 0
    16 000000F9 637420697300       
    17 000000FF 54686520696E746567-         divi        db      "The integer quotient is", 0
    17 00000108 65722071756F746965-
    17 00000111 6E7420697300       
    18 00000117 546865206D6F64756C-         remi        db      "The modulo is", 0
    18 00000120 6F20697300         
    19                                  
    20                                  section .bss
    21 00000000 <res 00000008>              resulti     resq    1
    22 00000008 <res 00000008>              modulo      resq    1
    23                                  
    24                                  section .text
    25                                      global main
    26                                  
    27                                  main:
    28 00000000 55                          push rbp
    29 00000001 4889E5                      mov rbp, rsp
    30                                  
    31                                  ; Displayng the numbers
    32 00000004 48BF-                       mov rdi, fmt
    32 00000006 [1800000000000000] 
    33 0000000E 488B3425[00000000]          mov rsi, [number1]
    34 00000016 488B1425[08000000]          mov rdx, [number2]
    35 0000001E B800000000                  mov rax, 0
    36 00000023 E8(00000000)                call printf
    37                                  
    38                                  ; adding
    39 00000028 488B0425[00000000]          mov rax, [number1]
    40 00000030 48030425[08000000]          add rax, [number2]      ;add number 2 to rax
    41 00000038 48890425[00000000]          mov [resulti], rax        ;mov sum to resulti
    42                                      ;displaying the result
    43 00000040 48BF-                       mov rdi, fmtint
    43 00000042 [3500000000000000] 
    44 0000004A 48BE-                       mov rsi, sumi
    44 0000004C [3D00000000000000] 
    45 00000054 488B1425[00000000]          mov rdx, [resulti]
    46 0000005C B800000000                  mov rax, 0
    47 00000061 E8(00000000)                call printf
    48                                  
    49                                  ; subtracting
    50 00000066 488B0425[00000000]          mov rax, [number1]
    51 0000006E 482B0425[08000000]          sub rax, [number2]      ;subtract from rax
    52 00000076 48890425[00000000]          mov [resulti], rax
    53                                      ;displaying the result
    54 0000007E 48BF-                       mov rdi, fmtint
    54 00000080 [3500000000000000] 
    55 00000088 48BE-                       mov rsi, difi
    55 0000008A [4800000000000000] 
    56 00000092 488B1425[00000000]          mov rdx, [resulti]
    57 0000009A B800000000                  mov rax, 0
    58 0000009F E8(00000000)                call printf
    59                                  
    60                                  ; incrementing
    61 000000A4 488B0425[00000000]          mov rax, [number1]
    62 000000AC 48FFC0                      inc rax             ; increment rax with 1
    63 000000AF 48890425[00000000]          mov [resulti], rax
    64                                      ;displaying the result
    65 000000B7 48BF-                       mov rdi, fmtint
    65 000000B9 [3500000000000000] 
    66 000000C1 48BE-                       mov rsi, inci
    66 000000C3 [5A00000000000000] 
    67 000000CB 488B1425[00000000]          mov rdx, [resulti]
    68 000000D3 B800000000                  mov rax, 0
    69 000000D8 E8(00000000)                call printf
    70                                  
    71                                  ; decrementing
    72 000000DD 488B0425[00000000]          mov rax, [number1]
    73 000000E5 48FFC8                      dec rax             ; increment rax with 1
    74 000000E8 48890425[00000000]          mov [resulti], rax
    75                                      ;displaying the result
    76 000000F0 48BF-                       mov rdi, fmtint
    76 000000F2 [3500000000000000] 
    77 000000FA 48BE-                       mov rsi, deci
    77 000000FC [7000000000000000] 
    78 00000104 488B1425[00000000]          mov rdx, [resulti]
    79 0000010C B800000000                  mov rax, 0
    80 00000111 E8(00000000)                call printf
    81                                  
    82                                  ; shift arithmetic left
    83 00000116 488B0425[00000000]          mov rax, [number1]
    84 0000011E 48C1E002                    sal rax, 2              ;multiply rax by 4
    85 00000122 48890425[00000000]          mov [resulti], rax
    86                                      ;displaying the result
    87 0000012A 48BF-                       mov rdi, fmtint
    87 0000012C [3500000000000000] 
    88 00000134 48BE-                       mov rsi, sali
    88 00000136 [8600000000000000] 
    89 0000013E 488B1425[00000000]          mov rdx, [resulti]
    90 00000146 B800000000                  mov rax, 0
    91 0000014B E8(00000000)                call printf
    92                                  
    93                                  ; shift arithmetic right
    94 00000150 488B0425[00000000]          mov rax, [number1]
    95 00000158 48C1F802                    sar rax, 2          ;divide by 4
    96 0000015C 48890425[00000000]          mov [resulti], rax
    97                                      ;displaying the result
    98 00000164 48BF-                       mov rdi, fmtint
    98 00000166 [3500000000000000] 
    99 0000016E 48BE-                       mov rsi, sari
    99 00000170 [A200000000000000] 
   100 00000178 488B1425[00000000]          mov rdx, [resulti]
   101 00000180 B800000000                  mov rax, 0
   102 00000185 E8(00000000)                call printf
   103                                  
   104                                  ; shift arithmetic  right with sign extionsion
   105 0000018A 488B0425[10000000]          mov rax, [neg_num]
   106 00000192 48C1F802                    sar rax, 2             ;divide rax by 4
   107 00000196 48890425[00000000]          mov [resulti], rax
   108                                      ;displaying the result
   109 0000019E 48BF-                       mov rdi, fmtint
   109 000001A0 [3500000000000000] 
   110 000001A8 48BE-                       mov rsi, sariex
   110 000001AA [BF00000000000000] 
   111 000001B2 488B1425[00000000]          mov rdx, [resulti]
   112 000001BA B800000000                  mov rax, 0
   113 000001BF E8(00000000)                call printf
   114                                  
   115                                  ; multiply
   116 000001C4 488B0425[00000000]          mov     rax, [number1]
   117 000001CC 48F72C25[08000000]          imul    qword [number2]     ;multiply rax by number2
   118 000001D4 48890425[00000000]          mov     [resulti], rax
   119                                      ;displaying the result
   120 000001DC 48BF-                       mov rdi, fmtint
   120 000001DE [3500000000000000] 
   121 000001E6 48BE-                       mov rsi, multi
   121 000001E8 [F000000000000000] 
   122 000001F0 488B1425[00000000]          mov rdx, [resulti]
   123 000001F8 B800000000                  mov rax, 0
   124 000001FD E8(00000000)                call printf
   125                                  
   126                                  ; divide
   127 00000202 488B0425[00000000]          mov     rax, [number1]
   128 0000020A BA00000000                  mov     rdx, 0          ;rdx must be zero before idiv
   129 0000020F 48F73C25[08000000]          idiv    qword [number2] ;divide rax by number2, modulo in rdx
   130 00000217 48890425[00000000]          mov     [resulti], rax
   131 0000021F 48891425[08000000]          mov     [modulo], rdx
   132                                      ;displaying the result
   133 00000227 48BF-                       mov rdi, fmtint
   133 00000229 [3500000000000000] 
   134 00000231 48BE-                       mov rsi, divi
   134 00000233 [FF00000000000000] 
   135 0000023B 488B1425[00000000]          mov rdx, [resulti]
   136 00000243 B800000000                  mov rax, 0
   137 00000248 E8(00000000)                call printf
   138                                      ;displaying the modulo
   139 0000024D 48BF-                       mov rdi, fmtint
   139 0000024F [3500000000000000] 
   140 00000257 48BE-                       mov rsi, remi
   140 00000259 [1701000000000000] 
   141 00000261 488B1425[08000000]          mov rdx, [modulo]
   142 00000269 B800000000                  mov rax, 0
   143 0000026E E8(00000000)                call printf
   144                                  
   145                                  
   146 00000273 4889EC                      mov rsp, rbp
   147 00000276 5D                          pop rbp
   148 00000277 C3                          ret
